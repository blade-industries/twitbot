// twitter bot by landon tubesing and daniel otaigbe


// Our Twitter library
const Twit = require('twit');

// markov probability node module to generate tweets from several sources
const Markov = require('markov-strings').default;

// Options for the markov generator, packaged as an object
const options = {
    maxTries: 1000,
    prng: Math.random,
    filter: (result) => {
        // The markov will only generate if these two conditions are met, which ensure a long enough tweet,
        // but not longer than 240 characters
        return result.string.split(' ').length >= 10 && result.string.length < 240;
    }
}

//filesync to write the markov corpus to a file
const fs = require('fs');

// We need to include our configuration file
const T = new Twit(require('./config.js'));

// where the corpus will be temporarily stored
var corpus2;

// This is the URL of a search for the latest tweets on the '#mediaarts' hashtag.
var searchItem = {q: "#gaming", count: 100, result_type: "recent"};

// This function finds the latest tweet with the #mediaarts hashtag, and retweets it.
var generatedText;

// Method for generating a tweet using markov probability model
function corpusTweet() {
	T.get('search/tweets', searchItem, async function (error, data) {
		console.log('retrieved ' + data.search_metadata.count + ' ' + data.search_metadata.query + ' tweets');
		if (!error) {
			console.log('returned data');

            // write status array to corpus text file, also add to corpus2 variable
			write(data.statuses);

            // make markov object using corpus as the source
            // statesize dictates how many words in a row should be from the same source
            // setting too high could cause the markov build to fail, so lower is safer
			const markov = new Markov(corpus2.split('\n'), {stateSize: 1});
			markov.buildCorpus();

			try {
                // build markov model from corpus
				generatedText = markov.generate(options).string;
                console.log(generatedText);
                var genTextArray = generatedText.split(" ");
                var newGenTextArray = [""];

                // remove links from the text generated by the markov
                for (var i = 0; i < genTextArray.length; i++) {
                    if(genTextArray[i].length >= 4) {
            	        let httpCheck = genTextArray[i].substring(0, 4);
            			if(!(httpCheck == "http")) {
            			    newGenTextArray.push(genTextArray[i]);
            			}
            		} else {
            			newGenTextArray.push(genTextArray[i]);
            		}
                }

                // put string array elements back into single string
                var newGeneratedText = "";
                for (var i = 0; i < newGenTextArray.length; i++) {
            		newGeneratedText += (newGenTextArray[i] + " ");
                }

                // Attempt to post with the text
                post(newGeneratedText, data);

            // attempt to catch any markov build errors
			} catch (error) {
				console.error(error);
			}

		} else {
			console.log('there was an error searching');
			return null;
		}
	});
}

function scrambleTweet() {
	T.get('search/tweets', searchItem, function (error, data) {
	  // log out any errors and responses
	  console.log(error, data);

	  // If our search request to the server had no errors...
	  if (!error) {

        // grab a random tweet from the 100 we fetched and scramble its text
		var tweetId = tweetData.statuses[Math.floor((Math.random() * data.statuses.length))].id_str;
		var text = scramble(data.statuses[0].text);

        // attempt to post with that scrambled text
        post(text, data);
	  }

	  else {
	  	console.log('There was an error with your hashtag search:', error);
	  }
	});
}

//reorder words of tweets, remove punctuation, but keep quoted tweet link at the end
function scramble(text) {
  //we split the tweet into an array of strings
	stringArray = text.split(" ");
	var newStringArray = [""];

	var iterations = stringArray.length;

	var i;
	for(i = 0; i < iterations - 1; i++) {

		var index = Math.floor(Math.random() * (stringArray.length - 1));
		//Filter out external links
		console.log(stringArray[index] + ' ' + index);
		if(stringArray[index].length >= 4) {
			let httpCheck = stringArray[index].substring(0, 4);

			if(!(httpCheck == "http")) {
				newStringArray.push(stringArray[index]);
				stringArray.splice(index, 1);
			}
		} else {
			newStringArray.push(stringArray[index]);
			stringArray.splice(index, 1);
		}
	}

	//reconstruct string from randomized array
	var newText = "";

    //turn the new array we made into a string without the last item, since that's a link.
	for (var i = 0; i < newStringArray.length - 1; i++) {
		newText += (newStringArray[i] + " ");
	}

    // remove all punctuation
	newText = newText.replace(/[.,\/!$%\^&\*;:{}=\-_`~()@]/g,"");

    // end each tweet with a ?
	newText += "? ";

    // re-add that last element
	newText += stringArray[stringArray.length - 1];

    // finally return our scrambled text
	return newText;
}

function min(a, b) {
	if(a < b) {
		return a;
	}
	return b;
}

function post(text, data) {

    // attempt to post
    T.post('statuses/update', {status: text}, data.statuses[0], function(error, data, response) {
        if(error) {
            // if it fails, simply try again since most errors are one-off
            console.log(error);
            runBot();
        } else {
            console.log(data);
            console.log('tweeted');
        }
    });
}

// writes set of tweets to text file and corpus2 variable
function write(tweets) {
	for(tweet of tweets) {
		corpus2 += tweet.text;
	}
	fs.writeFile('corpus.txt', corpus2, (err) => {
		if(err) throw err;
		else console.log('wrote corpus');
	});
}

// decide whether to generate a markov tweet or a scrambled tweet
function runBot() {
    var num = Math.random();
    console.log(num);
    if(num < 0.5) {
        corpusTweet();
    } else {
        scrambleTweet();
    }
}

runBot();

//Make the runBot function run every hour.
// 1000 ms = 1 second, 1 sec * 60 = 1 min, 1 min * 60 = 1 hour --> 1000 * 60 * 60
setInterval(runBot, 1000 * 60 * 60);
